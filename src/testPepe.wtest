import pepe.*

describe "Sueldo Pepe" {

	test "pepe cadete, monto Fijo, presentismo normal" {
		pepe.categoria(cadete)
		pepe.bonoPorResultado(montoFijo)
		pepe.bonoPorPresentismo(normal)
		pepe.faltas(3)
		assert.equals(20800, pepe.sueldo())
	}

	test "pepe gerente, bono porcentaje, presentismo nulo sueldo debe ser 16500" {
		pepe.categoria(gerente)
		pepe.bonoPorResultado(porcentaje)
		pepe.bonoPorPresentismo(presentismoNulo)
		assert.equals(16500, pepe.sueldo())
	}

	test "pepe cadete, bono x resultado porcentaje, bono por presentismo normal sueldo debe ser 24000 " {
		pepe.categoria(cadete)
		pepe.bonoPorResultado(porcentaje)
		pepe.bonoPorPresentismo(normal)
		pepe.faltas(0)
		assert.equals(24000, pepe.sueldo())
	}

	test "pepe cadete, bono x resultado porcentaje, bono por presentismo normal falto 1 dia sueldo debe ser de 23000" {
		pepe.categoria(cadete)
		pepe.bonoPorResultado(porcentaje)
		pepe.bonoPorPresentismo(normal)
		pepe.faltas(1)
		assert.equals(23000, pepe.sueldo())
	}

	test "pepe cadete medio tiempo bono x resultado nulo, bono por presentismo nulo su suelde es de 10000" {
		medioTiempo.categoriaBase(cadete)
		pepe.categoria(medioTiempo)
		pepe.bonoPorResultado(resultadoNulo)
		pepe.bonoPorPresentismo(presentismoNulo)
		assert.equals(10000, pepe.sueldo())
	}

	test "Pepe vendedor sin muchas ventas, bono x resultado porcentaje , presentismo normal falto 1 dia debe cobrar  18600" {
		pepe.categoria(vendedor)
		vendedor.desactivarAumentoPorMuchasVentas()
		pepe.bonoPorResultado(porcentaje)
		pepe.bonoPorPresentismo(normal)
		pepe.faltas(1)
		assert.equals(18600, pepe.sueldo())
	}

}

describe "sueldo Sofia" {

	test "sofia cadete, monto Fijo debe cobrar " {
		sofia.categoria(cadete)
		sofia.bonoPorResultado(montoFijo)
		assert.equals(26800, sofia.sueldo())
	}

	test "sofia gerente, bono porcentaje, sueldo debe ser 21450" {
		sofia.categoria(gerente)
		sofia.bonoPorResultado(porcentaje)
		assert.equals(21450, sofia.sueldo())
	}

	test "sofia cadete medio tiempo, bono x resultado porcentaje sueldo debe ser de " {
		medioTiempo.categoriaBase(cadete)
		sofia.categoria(medioTiempo)
		sofia.bonoPorResultado(porcentaje)
		assert.equals(14300, sofia.sueldo())
	}

}

describe "sueldo roque" {

	test "roque bono x resultado monto fijo, debe cobrar 37800 " {
		roque.bonoPorResultado(montoFijo)
		assert.equals(37800, roque.sueldo())
	}

}

//Realizar un test con pepe cadete con bono de resultados por porcentaje, bono por presentismo normal, nunca faltó. Debería tener $24000 de sueldo.
//Realizar un test con pepe cadete con bono de resultados por porcentaje, bono por presentismo normal, falto 1 día. Debería tener $23000 de sueldo.      